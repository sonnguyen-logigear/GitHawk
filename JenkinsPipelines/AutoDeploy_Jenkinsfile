#!/usr/bin/env groovy

pipeline {
    agent {
        node {
            label 'MacOSX'
        }
    }
    options { 
        timestamps()
        timeout(time: 2, unit: 'HOURS') 
    }
    environment {
        LC_ALL = "en_US.UTF-8"
        LANG = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
        GYM_OUTPUT_DIRECTORY = "artifacts"
    }
    stages {
        stage('Setup project') {
            steps {
                catchError {
                    sh "bundle"
                    sh "bundle exec pod install"
                    sh "npm install"  
                }      
            }
        }
        stage('Build and deploy Application') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                catchError {
                    withCredentials([string(credentialsId: "${MAC_PASSWORD}", variable: 'mac_password')]) {
                        sh "security unlock-keychain -p ${mac_password} login.keychain-db"
                    }
                    script {
                        if (env.BRANCH_NAME == 'master') {
                            slackSend(channel: '#auto-deploy', color: 'good', 
                                        message: 'Start deploying new app version to App Store')
                            sh 'fastlane publish'
                            slackSend(channel: '#auto-deploy', color: 'good', 
                                        message: 'Application is uploaded to App Store successfully')
                        } else {
                            withCredentials([string(credentialsId: 'crashlytics_api_token', 
                                                    variable: 'CRASHLYTICS_API_TOKEN'),
                                             string(credentialsId: 'crashlytics_build_secret', 
                                                    variable: 'CRASHLYTICS_BUILD_SECRET'),
                                             string(credentialsId: 'github_match_password', 
                                                    variable: 'MATCH_PASSWORD')]) {
                                slackSend(channel: '#auto-deploy', color: 'good', 
                                            message: 'Start distributing new app to Fabric beta')
                                sh "fastlane beta"
                                slackSend(channel: '#auto-deploy', color: 'good', 
                                            message: 'Application is uploaded to Fabric beta successfully')
                            }
                        }
                    }
                }
            }
        }
    }
    post('Archive necessary artifact') {
        always {
            archiveArtifacts artifacts: "${env.GYM_OUTPUT_DIRECTORY}/", onlyIfSuccessful: true
        }
        failure {
            slackSend(channel: '#auto-deploy', color: 'danger', 
                        message: "Failed to deploy app. <${env.BUILD_URL}|More details>")
        }
    }
}
