#!/usr/bin/env groovy

void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/sonnguyen-logigear/GitHawk"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-app"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent {
        node {
            label 'MacOSX'
        }
    }
    options { 
        timestamps()
        timeout(time: 1, unit: 'HOURS') 
    }
    environment {
        LC_ALL = "en_US.UTF-8"
        LANG = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
        GYM_OUTPUT_DIRECTORY = "artifacts"
    }
    stages {
        stage('Setup project') {
            steps {
                setBuildStatus("In progress...", "PENDING")
                catchError {
                    sh "bundle"
                    sh "bundle exec pod install"
                    sh "npm install"  
                }          
            }
        }
        stage('Build app') {
            steps {
                when {
                    expression { currentBuild.result != 'FAILURE'}
                }
                withCredentials([string(credentialsId: "${MAC_PASSWORD}", variable: 'mac_password')]) {
                    sh "security unlock-keychain -p ${mac_password} login.keychain-db"
                }
                sh "fastlane build"
            }
        }
    }
    post('Archive app') {
        always {
            emailext body: '${DEFAULT_CONTENT}',
            recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
            subject: '${DEFAULT_SUBJECT}'
        }
        success {
            archiveArtifacts artifacts: "${env.GYM_OUTPUT_DIRECTORY}/", onlyIfSuccessful: true
            setBuildStatus("Build succeeded", "SUCCESS")
            
        }
        failure {
            setBuildStatus("Build failed", "FAILURE")
        }
    }
}
