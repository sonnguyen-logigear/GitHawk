#!/usr/bin/env groovy

pipeline {
    agent {
        node {
            label 'MacOSX'
        }
    }
    options { 
        timestamps()
        timeout(time: 7, unit: 'HOURS') 
    }
    triggers {
        cron('H 19 * * *')
    }
    environment {
        ARTIFACTS_FOLDER = "artifacts"
        TESTCASES_FOLDER = "./src/tests/freetime/testcases/"
        APPIUM_TESTS_FOLDER = "appium_tests"
        ALLURE_REPORT_FOLDER = "allure-results"
        BUILD_LOG = "${ARTIFACTS_FOLDER}/xcodebuild.log"
        PYTEST_LOG = "pytest.log"
    }
    stages {
        stage('Setup project') {
            steps {
                catchError {
                    sh "bundle"
                    sh "bundle exec pod install"
                    sh "npm install"  
                } 
                sh "mkdir -p $ARTIFACTS_FOLDER"      
            }
        }
        stage('Build testing app') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                catchError {
                    sh 'xcodebuild clean build -workspace Freetime.xcworkspace -scheme "Freetime-AppCenter" \
                        -configuration Debug -allowProvisioningUpdates CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO \
                        CODE_SIGN_ENTITLEMENTS="" CODE_SIGNING_ALLOWED="NO" -destination name="iPhone 6" > $BUILD_LOG'
                    script {
                        env.APP_PATH = sh(returnStdout: true, 
                            script: 'grep -m 1 "Freetime.app" $BUILD_LOG | grep -oEi "\\/.*.app"').trim()
                    }
                }
            }
        }
        stage('Run appium tests') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                catchError {
                    dir("${env.APPIUM_TESTS_FOLDER}") {
                        git url: 'https://github.com/sonnguyen-logigear/mwd-githawk-automation-python.git',
                            credentialsId: '9680cfda-9ec1-4665-93e2-e5dee9e657b1'
                        sh './src/setup.sh'
                        sh './src/tools/start_appium_server.sh ../$ARTIFACTS_FOLDER'
                        script {
                            withCredentials([string(credentialsId: 'test_github_token', variable: 'PERSONAL_TOKEN')]) {
                                sh "python3 -m pytest --alluredir $ALLURE_REPORT_FOLDER -v -m stress_test $TESTCASES_FOLDER | tee $PYTEST_LOG ; ( exit \${PIPESTATUS[0]} )"  
                            }                           
                        }
                    }
                }
            }
        }
        stage('Generate reports') {
            steps {
                script {
                    allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: "${env.APPIUM_TESTS_FOLDER}/${env.ALLURE_REPORT_FOLDER}"]]
                    ])
                }
            }
        }
    }
    post('Close appium server and simulators') {
        always {
            archiveArtifacts artifacts: "${env.ARTIFACTS_FOLDER}/", onlyIfSuccessful: false
            sh 'killall -KILL node | true'
            sh 'killall "Simulator" | true'
            script {
                env.SUMMARY = sh(returnStdout: true, 
                                script: "grep -oiE '[a-z0-9 \\.,]+seconds' $APPIUM_TESTS_FOLDER/$PYTEST_LOG | tail -1")
            }
        }
        success {
            slackSend(channel: '#auto-test', color: "good", 
                      message: "Nightly Stress test passed: ${env.SUMMARY} <${env.BUILD_URL}|More details>")
        }
        failure {
            slackSend(channel: '#auto-test', color: "danger", 
                      message: "Nightly Stress test failed: ${env.SUMMARY} <${env.BUILD_URL}|More details>")
        }
    }
}
